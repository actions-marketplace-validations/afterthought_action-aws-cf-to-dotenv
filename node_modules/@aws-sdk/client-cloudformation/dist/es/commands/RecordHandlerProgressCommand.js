import { __extends } from "tslib";
import { RecordHandlerProgressInput, RecordHandlerProgressOutput } from "../models/models_0";
import { deserializeAws_queryRecordHandlerProgressCommand, serializeAws_queryRecordHandlerProgressCommand, } from "../protocols/Aws_query";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Reports progress of a resource handler to CloudFormation.</p>
 *          <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>. Do not use this API in your code.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFormationClient, RecordHandlerProgressCommand } from "@aws-sdk/client-cloudformation"; // ES Modules import
 * // const { CloudFormationClient, RecordHandlerProgressCommand } = require("@aws-sdk/client-cloudformation"); // CommonJS import
 * const client = new CloudFormationClient(config);
 * const command = new RecordHandlerProgressCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link RecordHandlerProgressCommandInput} for command's `input` shape.
 * @see {@link RecordHandlerProgressCommandOutput} for command's `response` shape.
 * @see {@link CloudFormationClientResolvedConfig | config} for command's `input` shape.
 *
 */
var RecordHandlerProgressCommand = /** @class */ (function (_super) {
    __extends(RecordHandlerProgressCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function RecordHandlerProgressCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    RecordHandlerProgressCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudFormationClient";
        var commandName = "RecordHandlerProgressCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: RecordHandlerProgressInput.filterSensitiveLog,
            outputFilterSensitiveLog: RecordHandlerProgressOutput.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    RecordHandlerProgressCommand.prototype.serialize = function (input, context) {
        return serializeAws_queryRecordHandlerProgressCommand(input, context);
    };
    RecordHandlerProgressCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_queryRecordHandlerProgressCommand(output, context);
    };
    return RecordHandlerProgressCommand;
}($Command));
export { RecordHandlerProgressCommand };
//# sourceMappingURL=RecordHandlerProgressCommand.js.map