import { __extends } from "tslib";
import { CloudFormationClient } from "./CloudFormationClient";
import { CancelUpdateStackCommand, } from "./commands/CancelUpdateStackCommand";
import { ContinueUpdateRollbackCommand, } from "./commands/ContinueUpdateRollbackCommand";
import { CreateChangeSetCommand, } from "./commands/CreateChangeSetCommand";
import { CreateStackCommand } from "./commands/CreateStackCommand";
import { CreateStackInstancesCommand, } from "./commands/CreateStackInstancesCommand";
import { CreateStackSetCommand, } from "./commands/CreateStackSetCommand";
import { DeleteChangeSetCommand, } from "./commands/DeleteChangeSetCommand";
import { DeleteStackCommand } from "./commands/DeleteStackCommand";
import { DeleteStackInstancesCommand, } from "./commands/DeleteStackInstancesCommand";
import { DeleteStackSetCommand, } from "./commands/DeleteStackSetCommand";
import { DeregisterTypeCommand, } from "./commands/DeregisterTypeCommand";
import { DescribeAccountLimitsCommand, } from "./commands/DescribeAccountLimitsCommand";
import { DescribeChangeSetCommand, } from "./commands/DescribeChangeSetCommand";
import { DescribeStackDriftDetectionStatusCommand, } from "./commands/DescribeStackDriftDetectionStatusCommand";
import { DescribeStackEventsCommand, } from "./commands/DescribeStackEventsCommand";
import { DescribeStackInstanceCommand, } from "./commands/DescribeStackInstanceCommand";
import { DescribeStackResourceCommand, } from "./commands/DescribeStackResourceCommand";
import { DescribeStackResourceDriftsCommand, } from "./commands/DescribeStackResourceDriftsCommand";
import { DescribeStackResourcesCommand, } from "./commands/DescribeStackResourcesCommand";
import { DescribeStackSetCommand, } from "./commands/DescribeStackSetCommand";
import { DescribeStackSetOperationCommand, } from "./commands/DescribeStackSetOperationCommand";
import { DescribeStacksCommand, } from "./commands/DescribeStacksCommand";
import { DescribeTypeCommand, } from "./commands/DescribeTypeCommand";
import { DescribeTypeRegistrationCommand, } from "./commands/DescribeTypeRegistrationCommand";
import { DetectStackDriftCommand, } from "./commands/DetectStackDriftCommand";
import { DetectStackResourceDriftCommand, } from "./commands/DetectStackResourceDriftCommand";
import { DetectStackSetDriftCommand, } from "./commands/DetectStackSetDriftCommand";
import { EstimateTemplateCostCommand, } from "./commands/EstimateTemplateCostCommand";
import { ExecuteChangeSetCommand, } from "./commands/ExecuteChangeSetCommand";
import { GetStackPolicyCommand, } from "./commands/GetStackPolicyCommand";
import { GetTemplateCommand } from "./commands/GetTemplateCommand";
import { GetTemplateSummaryCommand, } from "./commands/GetTemplateSummaryCommand";
import { ListChangeSetsCommand, } from "./commands/ListChangeSetsCommand";
import { ListExportsCommand } from "./commands/ListExportsCommand";
import { ListImportsCommand } from "./commands/ListImportsCommand";
import { ListStackInstancesCommand, } from "./commands/ListStackInstancesCommand";
import { ListStackResourcesCommand, } from "./commands/ListStackResourcesCommand";
import { ListStackSetOperationResultsCommand, } from "./commands/ListStackSetOperationResultsCommand";
import { ListStackSetOperationsCommand, } from "./commands/ListStackSetOperationsCommand";
import { ListStackSetsCommand, } from "./commands/ListStackSetsCommand";
import { ListStacksCommand } from "./commands/ListStacksCommand";
import { ListTypeRegistrationsCommand, } from "./commands/ListTypeRegistrationsCommand";
import { ListTypeVersionsCommand, } from "./commands/ListTypeVersionsCommand";
import { ListTypesCommand } from "./commands/ListTypesCommand";
import { RecordHandlerProgressCommand, } from "./commands/RecordHandlerProgressCommand";
import { RegisterTypeCommand, } from "./commands/RegisterTypeCommand";
import { SetStackPolicyCommand, } from "./commands/SetStackPolicyCommand";
import { SetTypeDefaultVersionCommand, } from "./commands/SetTypeDefaultVersionCommand";
import { SignalResourceCommand, } from "./commands/SignalResourceCommand";
import { StopStackSetOperationCommand, } from "./commands/StopStackSetOperationCommand";
import { UpdateStackCommand } from "./commands/UpdateStackCommand";
import { UpdateStackInstancesCommand, } from "./commands/UpdateStackInstancesCommand";
import { UpdateStackSetCommand, } from "./commands/UpdateStackSetCommand";
import { UpdateTerminationProtectionCommand, } from "./commands/UpdateTerminationProtectionCommand";
import { ValidateTemplateCommand, } from "./commands/ValidateTemplateCommand";
/**
 * <fullname>AWS CloudFormation</fullname>
 *          <p>AWS CloudFormation allows you to create and manage AWS infrastructure deployments
 *          predictably and repeatedly. You can use AWS CloudFormation to leverage AWS products, such
 *          as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification
 *          Service, Elastic Load Balancing, and Auto Scaling to build highly-reliable, highly
 *          scalable, cost-effective applications without creating or configuring the underlying AWS
 *          infrastructure.</p>
 *          <p>With AWS CloudFormation, you declare all of your resources and dependencies in a
 *          template file. The template defines a collection of resources as a single unit called a
 *          stack. AWS CloudFormation creates and deletes all member resources of the stack together
 *          and manages all dependencies between the resources for you.</p>
 *          <p>For more information about AWS CloudFormation, see the <a href="http://aws.amazon.com/cloudformation/">AWS CloudFormation Product Page</a>.</p>
 *          <p>Amazon CloudFormation makes use of other AWS products. If you need additional
 *          technical information about a specific AWS product, you can find the product's technical
 *          documentation at <a href="https://docs.aws.amazon.com/">docs.aws.amazon.com</a>.</p>
 */
var CloudFormation = /** @class */ (function (_super) {
    __extends(CloudFormation, _super);
    function CloudFormation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudFormation.prototype.cancelUpdateStack = function (args, optionsOrCb, cb) {
        var command = new CancelUpdateStackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.continueUpdateRollback = function (args, optionsOrCb, cb) {
        var command = new ContinueUpdateRollbackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.createChangeSet = function (args, optionsOrCb, cb) {
        var command = new CreateChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.createStack = function (args, optionsOrCb, cb) {
        var command = new CreateStackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.createStackInstances = function (args, optionsOrCb, cb) {
        var command = new CreateStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.createStackSet = function (args, optionsOrCb, cb) {
        var command = new CreateStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.deleteChangeSet = function (args, optionsOrCb, cb) {
        var command = new DeleteChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.deleteStack = function (args, optionsOrCb, cb) {
        var command = new DeleteStackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.deleteStackInstances = function (args, optionsOrCb, cb) {
        var command = new DeleteStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.deleteStackSet = function (args, optionsOrCb, cb) {
        var command = new DeleteStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.deregisterType = function (args, optionsOrCb, cb) {
        var command = new DeregisterTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeAccountLimits = function (args, optionsOrCb, cb) {
        var command = new DescribeAccountLimitsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeChangeSet = function (args, optionsOrCb, cb) {
        var command = new DescribeChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackDriftDetectionStatus = function (args, optionsOrCb, cb) {
        var command = new DescribeStackDriftDetectionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackEvents = function (args, optionsOrCb, cb) {
        var command = new DescribeStackEventsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackInstance = function (args, optionsOrCb, cb) {
        var command = new DescribeStackInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackResource = function (args, optionsOrCb, cb) {
        var command = new DescribeStackResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackResourceDrifts = function (args, optionsOrCb, cb) {
        var command = new DescribeStackResourceDriftsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackResources = function (args, optionsOrCb, cb) {
        var command = new DescribeStackResourcesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStacks = function (args, optionsOrCb, cb) {
        var command = new DescribeStacksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackSet = function (args, optionsOrCb, cb) {
        var command = new DescribeStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeStackSetOperation = function (args, optionsOrCb, cb) {
        var command = new DescribeStackSetOperationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeType = function (args, optionsOrCb, cb) {
        var command = new DescribeTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.describeTypeRegistration = function (args, optionsOrCb, cb) {
        var command = new DescribeTypeRegistrationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.detectStackDrift = function (args, optionsOrCb, cb) {
        var command = new DetectStackDriftCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.detectStackResourceDrift = function (args, optionsOrCb, cb) {
        var command = new DetectStackResourceDriftCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.detectStackSetDrift = function (args, optionsOrCb, cb) {
        var command = new DetectStackSetDriftCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.estimateTemplateCost = function (args, optionsOrCb, cb) {
        var command = new EstimateTemplateCostCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.executeChangeSet = function (args, optionsOrCb, cb) {
        var command = new ExecuteChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.getStackPolicy = function (args, optionsOrCb, cb) {
        var command = new GetStackPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.getTemplate = function (args, optionsOrCb, cb) {
        var command = new GetTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.getTemplateSummary = function (args, optionsOrCb, cb) {
        var command = new GetTemplateSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listChangeSets = function (args, optionsOrCb, cb) {
        var command = new ListChangeSetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listExports = function (args, optionsOrCb, cb) {
        var command = new ListExportsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listImports = function (args, optionsOrCb, cb) {
        var command = new ListImportsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listStackInstances = function (args, optionsOrCb, cb) {
        var command = new ListStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listStackResources = function (args, optionsOrCb, cb) {
        var command = new ListStackResourcesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listStacks = function (args, optionsOrCb, cb) {
        var command = new ListStacksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listStackSetOperationResults = function (args, optionsOrCb, cb) {
        var command = new ListStackSetOperationResultsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listStackSetOperations = function (args, optionsOrCb, cb) {
        var command = new ListStackSetOperationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listStackSets = function (args, optionsOrCb, cb) {
        var command = new ListStackSetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listTypeRegistrations = function (args, optionsOrCb, cb) {
        var command = new ListTypeRegistrationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listTypes = function (args, optionsOrCb, cb) {
        var command = new ListTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.listTypeVersions = function (args, optionsOrCb, cb) {
        var command = new ListTypeVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.recordHandlerProgress = function (args, optionsOrCb, cb) {
        var command = new RecordHandlerProgressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.registerType = function (args, optionsOrCb, cb) {
        var command = new RegisterTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.setStackPolicy = function (args, optionsOrCb, cb) {
        var command = new SetStackPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.setTypeDefaultVersion = function (args, optionsOrCb, cb) {
        var command = new SetTypeDefaultVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.signalResource = function (args, optionsOrCb, cb) {
        var command = new SignalResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.stopStackSetOperation = function (args, optionsOrCb, cb) {
        var command = new StopStackSetOperationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.updateStack = function (args, optionsOrCb, cb) {
        var command = new UpdateStackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.updateStackInstances = function (args, optionsOrCb, cb) {
        var command = new UpdateStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.updateStackSet = function (args, optionsOrCb, cb) {
        var command = new UpdateStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.updateTerminationProtection = function (args, optionsOrCb, cb) {
        var command = new UpdateTerminationProtectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CloudFormation.prototype.validateTemplate = function (args, optionsOrCb, cb) {
        var command = new ValidateTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return CloudFormation;
}(CloudFormationClient));
export { CloudFormation };
//# sourceMappingURL=CloudFormation.js.map